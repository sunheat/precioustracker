package net.maxsoft.precioustracker.model.dao;

import java.util.List;

import android.database.Cursor;
import android.database.sqlite.SQLiteDatabase;
import android.database.sqlite.SQLiteStatement;
import de.greenrobot.dao.AbstractDao;
import de.greenrobot.dao.Property;
import de.greenrobot.dao.internal.DaoConfig;
import de.greenrobot.dao.query.Query;
import de.greenrobot.dao.query.QueryBuilder;
import net.maxsoft.precioustracker.model.dao.PreciousMove;

// THIS CODE IS GENERATED BY greenDAO, DO NOT EDIT.
/** 
 * DAO for table PRECIOUS_MOVE.
*/
public class PreciousMoveDao extends AbstractDao<PreciousMove, Long> {

    public static final String TABLENAME = "PRECIOUS_MOVE";

    /**
     * Properties of entity PreciousMove.<br/>
     * Can be used for QueryBuilder and for referencing column names.
    */
    public static class Properties {
        public final static Property Id = new Property(0, Long.class, "id", true, "_id");
        public final static Property FromWhere = new Property(1, String.class, "fromWhere", false, "FROM_WHERE");
        public final static Property ToWhere = new Property(2, String.class, "toWhere", false, "TO_WHERE");
        public final static Property DateMoved = new Property(3, java.util.Date.class, "dateMoved", false, "DATE_MOVED");
        public final static Property SnapshotFilePath = new Property(4, String.class, "snapshotFilePath", false, "SNAPSHOT_FILE_PATH");
        public final static Property ItemId = new Property(5, long.class, "itemId", false, "ITEM_ID");
    };

    private Query<PreciousMove> preciousItem_PreciousMoveListQuery;

    public PreciousMoveDao(DaoConfig config) {
        super(config);
    }
    
    public PreciousMoveDao(DaoConfig config, DaoSession daoSession) {
        super(config, daoSession);
    }

    /** Creates the underlying database table. */
    public static void createTable(SQLiteDatabase db, boolean ifNotExists) {
        String constraint = ifNotExists? "IF NOT EXISTS ": "";
        db.execSQL("CREATE TABLE " + constraint + "'PRECIOUS_MOVE' (" + //
                "'_id' INTEGER PRIMARY KEY ," + // 0: id
                "'FROM_WHERE' TEXT NOT NULL ," + // 1: fromWhere
                "'TO_WHERE' TEXT NOT NULL ," + // 2: toWhere
                "'DATE_MOVED' INTEGER NOT NULL ," + // 3: dateMoved
                "'SNAPSHOT_FILE_PATH' TEXT," + // 4: snapshotFilePath
                "'ITEM_ID' INTEGER NOT NULL );"); // 5: itemId
    }

    /** Drops the underlying database table. */
    public static void dropTable(SQLiteDatabase db, boolean ifExists) {
        String sql = "DROP TABLE " + (ifExists ? "IF EXISTS " : "") + "'PRECIOUS_MOVE'";
        db.execSQL(sql);
    }

    /** @inheritdoc */
    @Override
    protected void bindValues(SQLiteStatement stmt, PreciousMove entity) {
        stmt.clearBindings();
 
        Long id = entity.getId();
        if (id != null) {
            stmt.bindLong(1, id);
        }
        stmt.bindString(2, entity.getFromWhere());
        stmt.bindString(3, entity.getToWhere());
        stmt.bindLong(4, entity.getDateMoved().getTime());
 
        String snapshotFilePath = entity.getSnapshotFilePath();
        if (snapshotFilePath != null) {
            stmt.bindString(5, snapshotFilePath);
        }
        stmt.bindLong(6, entity.getItemId());
    }

    /** @inheritdoc */
    @Override
    public Long readKey(Cursor cursor, int offset) {
        return cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0);
    }    

    /** @inheritdoc */
    @Override
    public PreciousMove readEntity(Cursor cursor, int offset) {
        PreciousMove entity = new PreciousMove( //
            cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0), // id
            cursor.getString(offset + 1), // fromWhere
            cursor.getString(offset + 2), // toWhere
            new java.util.Date(cursor.getLong(offset + 3)), // dateMoved
            cursor.isNull(offset + 4) ? null : cursor.getString(offset + 4), // snapshotFilePath
            cursor.getLong(offset + 5) // itemId
        );
        return entity;
    }
     
    /** @inheritdoc */
    @Override
    public void readEntity(Cursor cursor, PreciousMove entity, int offset) {
        entity.setId(cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0));
        entity.setFromWhere(cursor.getString(offset + 1));
        entity.setToWhere(cursor.getString(offset + 2));
        entity.setDateMoved(new java.util.Date(cursor.getLong(offset + 3)));
        entity.setSnapshotFilePath(cursor.isNull(offset + 4) ? null : cursor.getString(offset + 4));
        entity.setItemId(cursor.getLong(offset + 5));
     }
    
    /** @inheritdoc */
    @Override
    protected Long updateKeyAfterInsert(PreciousMove entity, long rowId) {
        entity.setId(rowId);
        return rowId;
    }
    
    /** @inheritdoc */
    @Override
    public Long getKey(PreciousMove entity) {
        if(entity != null) {
            return entity.getId();
        } else {
            return null;
        }
    }

    /** @inheritdoc */
    @Override    
    protected boolean isEntityUpdateable() {
        return true;
    }
    
    /** Internal query to resolve the "preciousMoveList" to-many relationship of PreciousItem. */
    public List<PreciousMove> _queryPreciousItem_PreciousMoveList(long itemId) {
        synchronized (this) {
            if (preciousItem_PreciousMoveListQuery == null) {
                QueryBuilder<PreciousMove> queryBuilder = queryBuilder();
                queryBuilder.where(Properties.ItemId.eq(null));
                preciousItem_PreciousMoveListQuery = queryBuilder.build();
            }
        }
        Query<PreciousMove> query = preciousItem_PreciousMoveListQuery.forCurrentThread();
        query.setParameter(0, itemId);
        return query.list();
    }

}
