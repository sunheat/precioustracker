package net.maxsoft.precioustracker.model.dao;

import java.util.List;
import android.database.Cursor;
import android.database.sqlite.SQLiteDatabase;
import android.database.sqlite.SQLiteStatement;

import de.greenrobot.dao.AbstractDao;
import de.greenrobot.dao.Property;
import de.greenrobot.dao.internal.DaoConfig;
import de.greenrobot.dao.query.Query;
import de.greenrobot.dao.query.QueryBuilder;

import net.maxsoft.precioustracker.model.dao.PreciousItem;

// THIS CODE IS GENERATED BY greenDAO, DO NOT EDIT.
/** 
 * DAO for table PRECIOUS_ITEM.
*/
public class PreciousItemDao extends AbstractDao<PreciousItem, Long> {

    public static final String TABLENAME = "PRECIOUS_ITEM";

    /**
     * Properties of entity PreciousItem.<br/>
     * Can be used for QueryBuilder and for referencing column names.
    */
    public static class Properties {
        public final static Property Id = new Property(0, Long.class, "id", true, "_id");
        public final static Property Item_name = new Property(1, String.class, "item_name", false, "ITEM_NAME");
        public final static Property Location = new Property(2, String.class, "location", false, "LOCATION");
        public final static Property Date_created = new Property(3, java.util.Date.class, "date_created", false, "DATE_CREATED");
        public final static Property Last_Moved = new Property(4, java.util.Date.class, "last_Moved", false, "LAST__MOVED");
        public final static Property Item_photo = new Property(5, String.class, "item_photo", false, "ITEM_PHOTO");
        public final static Property Category_id = new Property(6, long.class, "category_id", false, "CATEGORY_ID");
    };

    private DaoSession daoSession;

    private Query<PreciousItem> preciousCategory_PreciousItemListQuery;

    public PreciousItemDao(DaoConfig config) {
        super(config);
    }
    
    public PreciousItemDao(DaoConfig config, DaoSession daoSession) {
        super(config, daoSession);
        this.daoSession = daoSession;
    }

    /** Creates the underlying database table. */
    public static void createTable(SQLiteDatabase db, boolean ifNotExists) {
        String constraint = ifNotExists? "IF NOT EXISTS ": "";
        db.execSQL("CREATE TABLE " + constraint + "'PRECIOUS_ITEM' (" + //
                "'_id' INTEGER PRIMARY KEY ," + // 0: id
                "'ITEM_NAME' TEXT NOT NULL ," + // 1: item_name
                "'LOCATION' TEXT," + // 2: location
                "'DATE_CREATED' INTEGER," + // 3: date_created
                "'LAST__MOVED' INTEGER," + // 4: last_Moved
                "'ITEM_PHOTO' TEXT," + // 5: item_photo
                "'CATEGORY_ID' INTEGER NOT NULL );"); // 6: category_id
    }

    /** Drops the underlying database table. */
    public static void dropTable(SQLiteDatabase db, boolean ifExists) {
        String sql = "DROP TABLE " + (ifExists ? "IF EXISTS " : "") + "'PRECIOUS_ITEM'";
        db.execSQL(sql);
    }

    /** @inheritdoc */
    @Override
    protected void bindValues(SQLiteStatement stmt, PreciousItem entity) {
        stmt.clearBindings();
 
        Long id = entity.getId();
        if (id != null) {
            stmt.bindLong(1, id);
        }
        stmt.bindString(2, entity.getItem_name());
 
        String location = entity.getLocation();
        if (location != null) {
            stmt.bindString(3, location);
        }
 
        java.util.Date date_created = entity.getDate_created();
        if (date_created != null) {
            stmt.bindLong(4, date_created.getTime());
        }
 
        java.util.Date last_Moved = entity.getLast_Moved();
        if (last_Moved != null) {
            stmt.bindLong(5, last_Moved.getTime());
        }
 
        String item_photo = entity.getItem_photo();
        if (item_photo != null) {
            stmt.bindString(6, item_photo);
        }
        stmt.bindLong(7, entity.getCategory_id());
    }

    @Override
    protected void attachEntity(PreciousItem entity) {
        super.attachEntity(entity);
        entity.__setDaoSession(daoSession);
    }

    /** @inheritdoc */
    @Override
    public Long readKey(Cursor cursor, int offset) {
        return cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0);
    }    

    /** @inheritdoc */
    @Override
    public PreciousItem readEntity(Cursor cursor, int offset) {
        PreciousItem entity = new PreciousItem( //
            cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0), // id
            cursor.getString(offset + 1), // item_name
            cursor.isNull(offset + 2) ? null : cursor.getString(offset + 2), // location
            cursor.isNull(offset + 3) ? null : new java.util.Date(cursor.getLong(offset + 3)), // date_created
            cursor.isNull(offset + 4) ? null : new java.util.Date(cursor.getLong(offset + 4)), // last_Moved
            cursor.isNull(offset + 5) ? null : cursor.getString(offset + 5), // item_photo
            cursor.getLong(offset + 6) // category_id
        );
        return entity;
    }
     
    /** @inheritdoc */
    @Override
    public void readEntity(Cursor cursor, PreciousItem entity, int offset) {
        entity.setId(cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0));
        entity.setItem_name(cursor.getString(offset + 1));
        entity.setLocation(cursor.isNull(offset + 2) ? null : cursor.getString(offset + 2));
        entity.setDate_created(cursor.isNull(offset + 3) ? null : new java.util.Date(cursor.getLong(offset + 3)));
        entity.setLast_Moved(cursor.isNull(offset + 4) ? null : new java.util.Date(cursor.getLong(offset + 4)));
        entity.setItem_photo(cursor.isNull(offset + 5) ? null : cursor.getString(offset + 5));
        entity.setCategory_id(cursor.getLong(offset + 6));
     }
    
    /** @inheritdoc */
    @Override
    protected Long updateKeyAfterInsert(PreciousItem entity, long rowId) {
        entity.setId(rowId);
        return rowId;
    }
    
    /** @inheritdoc */
    @Override
    public Long getKey(PreciousItem entity) {
        if(entity != null) {
            return entity.getId();
        } else {
            return null;
        }
    }

    /** @inheritdoc */
    @Override    
    protected boolean isEntityUpdateable() {
        return true;
    }
    
    /** Internal query to resolve the "preciousItemList" to-many relationship of PreciousCategory. */
    public List<PreciousItem> _queryPreciousCategory_PreciousItemList(long category_id) {
        synchronized (this) {
            if (preciousCategory_PreciousItemListQuery == null) {
                QueryBuilder<PreciousItem> queryBuilder = queryBuilder();
                queryBuilder.where(Properties.Category_id.eq(null));
                preciousCategory_PreciousItemListQuery = queryBuilder.build();
            }
        }
        Query<PreciousItem> query = preciousCategory_PreciousItemListQuery.forCurrentThread();
        query.setParameter(0, category_id);
        return query.list();
    }

}
