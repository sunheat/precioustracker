package net.maxsoft.precioustracker.model.dao;

import java.util.List;
import net.maxsoft.precioustracker.model.dao.DaoSession;
import de.greenrobot.dao.DaoException;

// THIS CODE IS GENERATED BY greenDAO, DO NOT EDIT. Enable "keep" sections if you want to edit. 
/**
 * Entity mapped to table PRECIOUS_ITEM.
 */
public class PreciousItem {

    private Long id;
    /** Not-null value. */
    private String item_name;
    private String location;
    private java.util.Date date_created;
    private java.util.Date last_Moved;
    private String item_photo;
    private long category_id;

    /** Used to resolve relations */
    private transient DaoSession daoSession;

    /** Used for active entity operations. */
    private transient PreciousItemDao myDao;

    private List<PreciousMove> preciousMoveList;

    public PreciousItem() {
    }

    public PreciousItem(Long id) {
        this.id = id;
    }

    public PreciousItem(Long id, String item_name, String location, java.util.Date date_created, java.util.Date last_Moved, String item_photo, long category_id) {
        this.id = id;
        this.item_name = item_name;
        this.location = location;
        this.date_created = date_created;
        this.last_Moved = last_Moved;
        this.item_photo = item_photo;
        this.category_id = category_id;
    }

    /** called by internal mechanisms, do not call yourself. */
    public void __setDaoSession(DaoSession daoSession) {
        this.daoSession = daoSession;
        myDao = daoSession != null ? daoSession.getPreciousItemDao() : null;
    }

    public Long getId() {
        return id;
    }

    public void setId(Long id) {
        this.id = id;
    }

    /** Not-null value. */
    public String getItem_name() {
        return item_name;
    }

    /** Not-null value; ensure this value is available before it is saved to the database. */
    public void setItem_name(String item_name) {
        this.item_name = item_name;
    }

    public String getLocation() {
        return location;
    }

    public void setLocation(String location) {
        this.location = location;
    }

    public java.util.Date getDate_created() {
        return date_created;
    }

    public void setDate_created(java.util.Date date_created) {
        this.date_created = date_created;
    }

    public java.util.Date getLast_Moved() {
        return last_Moved;
    }

    public void setLast_Moved(java.util.Date last_Moved) {
        this.last_Moved = last_Moved;
    }

    public String getItem_photo() {
        return item_photo;
    }

    public void setItem_photo(String item_photo) {
        this.item_photo = item_photo;
    }

    public long getCategory_id() {
        return category_id;
    }

    public void setCategory_id(long category_id) {
        this.category_id = category_id;
    }

    /** To-many relationship, resolved on first access (and after reset). Changes to to-many relations are not persisted, make changes to the target entity. */
    public List<PreciousMove> getPreciousMoveList() {
        if (preciousMoveList == null) {
            if (daoSession == null) {
                throw new DaoException("Entity is detached from DAO context");
            }
            PreciousMoveDao targetDao = daoSession.getPreciousMoveDao();
            List<PreciousMove> preciousMoveListNew = targetDao._queryPreciousItem_PreciousMoveList(id);
            synchronized (this) {
                if(preciousMoveList == null) {
                    preciousMoveList = preciousMoveListNew;
                }
            }
        }
        return preciousMoveList;
    }

    /** Resets a to-many relationship, making the next get call to query for a fresh result. */
    public synchronized void resetPreciousMoveList() {
        preciousMoveList = null;
    }

    /** Convenient call for {@link AbstractDao#delete(Object)}. Entity must attached to an entity context. */
    public void delete() {
        if (myDao == null) {
            throw new DaoException("Entity is detached from DAO context");
        }    
        myDao.delete(this);
    }

    /** Convenient call for {@link AbstractDao#update(Object)}. Entity must attached to an entity context. */
    public void update() {
        if (myDao == null) {
            throw new DaoException("Entity is detached from DAO context");
        }    
        myDao.update(this);
    }

    /** Convenient call for {@link AbstractDao#refresh(Object)}. Entity must attached to an entity context. */
    public void refresh() {
        if (myDao == null) {
            throw new DaoException("Entity is detached from DAO context");
        }    
        myDao.refresh(this);
    }

}
