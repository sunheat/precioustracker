package net.maxsoft.precioustracker.model.dao;

import java.io.Serializable;
import java.util.List;

import net.maxsoft.precioustracker.model.dao.DaoSession;
import de.greenrobot.dao.DaoException;

// THIS CODE IS GENERATED BY greenDAO, EDIT ONLY INSIDE THE "KEEP"-SECTIONS

// KEEP INCLUDES - put your custom includes here
// KEEP INCLUDES END
/**
 * Entity mapped to table PRECIOUS_ITEM.
 */
public class PreciousItem implements Serializable {

    private Long id;
    /** Not-null value. */
    private String name;
    private String location;
    private java.util.Date dateCreated;
    private java.util.Date lastMoved;
    private String photoFilePath;
    private long categoryId;

    /** Used to resolve relations */
    private transient DaoSession daoSession;

    /** Used for active entity operations. */
    private transient PreciousItemDao myDao;

    private List<PreciousMove> preciousMoveList;

    // KEEP FIELDS - put your custom fields here
    private static final long serialVersionUID = 4478169665259540222L;

    public static final String INTENT_MESSAGE = "intent.PreciousItem";
    // KEEP FIELDS END

    public PreciousItem() {
    }

    public PreciousItem(Long id) {
        this.id = id;
    }

    public PreciousItem(Long id, String name, String location, java.util.Date dateCreated, java.util.Date lastMoved, String photoFilePath, long categoryId) {
        this.id = id;
        this.name = name;
        this.location = location;
        this.dateCreated = dateCreated;
        this.lastMoved = lastMoved;
        this.photoFilePath = photoFilePath;
        this.categoryId = categoryId;
    }

    /** called by internal mechanisms, do not call yourself. */
    public void __setDaoSession(DaoSession daoSession) {
        this.daoSession = daoSession;
        myDao = daoSession != null ? daoSession.getPreciousItemDao() : null;
    }

    public Long getId() {
        return id;
    }

    public void setId(Long id) {
        this.id = id;
    }

    /** Not-null value. */
    public String getName() {
        return name;
    }

    /** Not-null value; ensure this value is available before it is saved to the database. */
    public void setName(String name) {
        this.name = name;
    }

    public String getLocation() {
        return location;
    }

    public void setLocation(String location) {
        this.location = location;
    }

    public java.util.Date getDateCreated() {
        return dateCreated;
    }

    public void setDateCreated(java.util.Date dateCreated) {
        this.dateCreated = dateCreated;
    }

    public java.util.Date getLastMoved() {
        return lastMoved;
    }

    public void setLastMoved(java.util.Date lastMoved) {
        this.lastMoved = lastMoved;
    }

    public String getPhotoFilePath() {
        return photoFilePath;
    }

    public void setPhotoFilePath(String photoFilePath) {
        this.photoFilePath = photoFilePath;
    }

    public long getCategoryId() {
        return categoryId;
    }

    public void setCategoryId(long categoryId) {
        this.categoryId = categoryId;
    }

    /** To-many relationship, resolved on first access (and after reset). Changes to to-many relations are not persisted, make changes to the target entity. */
    public List<PreciousMove> getPreciousMoveList() {
        if (preciousMoveList == null) {
            if (daoSession == null) {
                throw new DaoException("Entity is detached from DAO context");
            }
            PreciousMoveDao targetDao = daoSession.getPreciousMoveDao();
            List<PreciousMove> preciousMoveListNew = targetDao._queryPreciousItem_PreciousMoveList(id);
            synchronized (this) {
                if(preciousMoveList == null) {
                    preciousMoveList = preciousMoveListNew;
                }
            }
        }
        return preciousMoveList;
    }

    /** Resets a to-many relationship, making the next get call to query for a fresh result. */
    public synchronized void resetPreciousMoveList() {
        preciousMoveList = null;
    }

    /** Convenient call for {@link AbstractDao#delete(Object)}. Entity must attached to an entity context. */
    public void delete() {
        if (myDao == null) {
            throw new DaoException("Entity is detached from DAO context");
        }    
        myDao.delete(this);
    }

    /** Convenient call for {@link AbstractDao#update(Object)}. Entity must attached to an entity context. */
    public void update() {
        if (myDao == null) {
            throw new DaoException("Entity is detached from DAO context");
        }    
        myDao.update(this);
    }

    /** Convenient call for {@link AbstractDao#refresh(Object)}. Entity must attached to an entity context. */
    public void refresh() {
        if (myDao == null) {
            throw new DaoException("Entity is detached from DAO context");
        }    
        myDao.refresh(this);
    }

    // KEEP METHODS - put your custom methods here
    // KEEP METHODS END

}
