package net.maxsoft.precioustracker.model.dao;

import android.database.Cursor;
import android.database.sqlite.SQLiteDatabase;
import android.database.sqlite.SQLiteStatement;
import de.greenrobot.dao.AbstractDao;
import de.greenrobot.dao.Property;
import de.greenrobot.dao.internal.DaoConfig;
import de.greenrobot.dao.internal.SqlUtils;

import java.util.ArrayList;
import java.util.List;

// THIS CODE IS GENERATED BY greenDAO, DO NOT EDIT.

/**
 * DAO for table PRECIOUS_QUICK_ADD.
*/
public class PreciousQuickAddDao extends AbstractDao<PreciousQuickAdd, Long> {

    public static final String TABLENAME = "PRECIOUS_QUICK_ADD";

    /**
     * Properties of entity PreciousQuickAdd.<br/>
     * Can be used for QueryBuilder and for referencing column names.
    */
    public static class Properties {
        public final static Property Id = new Property(0, Long.class, "id", true, "_id");
        public final static Property DateTaken = new Property(1, java.util.Date.class, "dateTaken", false, "DATE_TAKEN");
        public final static Property PhotoFilePath = new Property(2, String.class, "photoFilePath", false, "PHOTO_FILE_PATH");
        public final static Property MemoText = new Property(3, String.class, "memoText", false, "MEMO_TEXT");
        public final static Property MemoRecordingFilePath = new Property(4, String.class, "memoRecordingFilePath", false, "MEMO_RECORDING_FILE_PATH");
        public final static Property Processed = new Property(5, Boolean.class, "processed", false, "PROCESSED");
        public final static Property RegardingItem = new Property(6, Long.class, "regardingItem", false, "REGARDING_ITEM");
    };

    private DaoSession daoSession;


    public PreciousQuickAddDao(DaoConfig config) {
        super(config);
    }
    
    public PreciousQuickAddDao(DaoConfig config, DaoSession daoSession) {
        super(config, daoSession);
        this.daoSession = daoSession;
    }

    /** Creates the underlying database table. */
    public static void createTable(SQLiteDatabase db, boolean ifNotExists) {
        String constraint = ifNotExists? "IF NOT EXISTS ": "";
        db.execSQL("CREATE TABLE " + constraint + "'PRECIOUS_QUICK_ADD' (" + //
                "'_id' INTEGER PRIMARY KEY ," + // 0: id
                "'DATE_TAKEN' INTEGER," + // 1: dateTaken
                "'PHOTO_FILE_PATH' TEXT," + // 2: photoFilePath
                "'MEMO_TEXT' TEXT," + // 3: memoText
                "'MEMO_RECORDING_FILE_PATH' TEXT," + // 4: memoRecordingFilePath
                "'PROCESSED' INTEGER," + // 5: processed
                "'REGARDING_ITEM' INTEGER);"); // 6: regardingItem
    }

    /** Drops the underlying database table. */
    public static void dropTable(SQLiteDatabase db, boolean ifExists) {
        String sql = "DROP TABLE " + (ifExists ? "IF EXISTS " : "") + "'PRECIOUS_QUICK_ADD'";
        db.execSQL(sql);
    }

    /** @inheritdoc */
    @Override
    protected void bindValues(SQLiteStatement stmt, PreciousQuickAdd entity) {
        stmt.clearBindings();
 
        Long id = entity.getId();
        if (id != null) {
            stmt.bindLong(1, id);
        }
 
        java.util.Date dateTaken = entity.getDateTaken();
        if (dateTaken != null) {
            stmt.bindLong(2, dateTaken.getTime());
        }
 
        String photoFilePath = entity.getPhotoFilePath();
        if (photoFilePath != null) {
            stmt.bindString(3, photoFilePath);
        }
 
        String memoText = entity.getMemoText();
        if (memoText != null) {
            stmt.bindString(4, memoText);
        }
 
        String memoRecordingFilePath = entity.getMemoRecordingFilePath();
        if (memoRecordingFilePath != null) {
            stmt.bindString(5, memoRecordingFilePath);
        }
 
        Boolean processed = entity.getProcessed();
        if (processed != null) {
            stmt.bindLong(6, processed ? 1l: 0l);
        }
 
        Long regardingItem = entity.getRegardingItem();
        if (regardingItem != null) {
            stmt.bindLong(7, regardingItem);
        }
    }

    @Override
    protected void attachEntity(PreciousQuickAdd entity) {
        super.attachEntity(entity);
        entity.__setDaoSession(daoSession);
    }

    /** @inheritdoc */
    @Override
    public Long readKey(Cursor cursor, int offset) {
        return cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0);
    }    

    /** @inheritdoc */
    @Override
    public PreciousQuickAdd readEntity(Cursor cursor, int offset) {
        PreciousQuickAdd entity = new PreciousQuickAdd( //
            cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0), // id
            cursor.isNull(offset + 1) ? null : new java.util.Date(cursor.getLong(offset + 1)), // dateTaken
            cursor.isNull(offset + 2) ? null : cursor.getString(offset + 2), // photoFilePath
            cursor.isNull(offset + 3) ? null : cursor.getString(offset + 3), // memoText
            cursor.isNull(offset + 4) ? null : cursor.getString(offset + 4), // memoRecordingFilePath
            cursor.isNull(offset + 5) ? null : cursor.getShort(offset + 5) != 0, // processed
            cursor.isNull(offset + 6) ? null : cursor.getLong(offset + 6) // regardingItem
        );
        return entity;
    }
     
    /** @inheritdoc */
    @Override
    public void readEntity(Cursor cursor, PreciousQuickAdd entity, int offset) {
        entity.setId(cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0));
        entity.setDateTaken(cursor.isNull(offset + 1) ? null : new java.util.Date(cursor.getLong(offset + 1)));
        entity.setPhotoFilePath(cursor.isNull(offset + 2) ? null : cursor.getString(offset + 2));
        entity.setMemoText(cursor.isNull(offset + 3) ? null : cursor.getString(offset + 3));
        entity.setMemoRecordingFilePath(cursor.isNull(offset + 4) ? null : cursor.getString(offset + 4));
        entity.setProcessed(cursor.isNull(offset + 5) ? null : cursor.getShort(offset + 5) != 0);
        entity.setRegardingItem(cursor.isNull(offset + 6) ? null : cursor.getLong(offset + 6));
     }
    
    /** @inheritdoc */
    @Override
    protected Long updateKeyAfterInsert(PreciousQuickAdd entity, long rowId) {
        entity.setId(rowId);
        return rowId;
    }
    
    /** @inheritdoc */
    @Override
    public Long getKey(PreciousQuickAdd entity) {
        if(entity != null) {
            return entity.getId();
        } else {
            return null;
        }
    }

    /** @inheritdoc */
    @Override    
    protected boolean isEntityUpdateable() {
        return true;
    }
    
    private String selectDeep;

    protected String getSelectDeep() {
        if (selectDeep == null) {
            StringBuilder builder = new StringBuilder("SELECT ");
            SqlUtils.appendColumns(builder, "T", getAllColumns());
            builder.append(',');
            SqlUtils.appendColumns(builder, "T0", daoSession.getPreciousItemDao().getAllColumns());
            builder.append(" FROM PRECIOUS_QUICK_ADD T");
            builder.append(" LEFT JOIN PRECIOUS_ITEM T0 ON T.'REGARDING_ITEM'=T0.'_id'");
            builder.append(' ');
            selectDeep = builder.toString();
        }
        return selectDeep;
    }
    
    protected PreciousQuickAdd loadCurrentDeep(Cursor cursor, boolean lock) {
        PreciousQuickAdd entity = loadCurrent(cursor, 0, lock);
        int offset = getAllColumns().length;

        PreciousItem preciousItem = loadCurrentOther(daoSession.getPreciousItemDao(), cursor, offset);
        entity.setPreciousItem(preciousItem);

        return entity;    
    }

    public PreciousQuickAdd loadDeep(Long key) {
        assertSinglePk();
        if (key == null) {
            return null;
        }

        StringBuilder builder = new StringBuilder(getSelectDeep());
        builder.append("WHERE ");
        SqlUtils.appendColumnsEqValue(builder, "T", getPkColumns());
        String sql = builder.toString();
        
        String[] keyArray = new String[] { key.toString() };
        Cursor cursor = db.rawQuery(sql, keyArray);
        
        try {
            boolean available = cursor.moveToFirst();
            if (!available) {
                return null;
            } else if (!cursor.isLast()) {
                throw new IllegalStateException("Expected unique result, but count was " + cursor.getCount());
            }
            return loadCurrentDeep(cursor, true);
        } finally {
            cursor.close();
        }
    }
    
    /** Reads all available rows from the given cursor and returns a list of new ImageTO objects. */
    public List<PreciousQuickAdd> loadAllDeepFromCursor(Cursor cursor) {
        int count = cursor.getCount();
        List<PreciousQuickAdd> list = new ArrayList<PreciousQuickAdd>(count);
        
        if (cursor.moveToFirst()) {
            if (identityScope != null) {
                identityScope.lock();
                identityScope.reserveRoom(count);
            }
            try {
                do {
                    list.add(loadCurrentDeep(cursor, false));
                } while (cursor.moveToNext());
            } finally {
                if (identityScope != null) {
                    identityScope.unlock();
                }
            }
        }
        return list;
    }
    
    protected List<PreciousQuickAdd> loadDeepAllAndCloseCursor(Cursor cursor) {
        try {
            return loadAllDeepFromCursor(cursor);
        } finally {
            cursor.close();
        }
    }
    

    /** A raw-style query where you can pass any WHERE clause and arguments. */
    public List<PreciousQuickAdd> queryDeep(String where, String... selectionArg) {
        Cursor cursor = db.rawQuery(getSelectDeep() + where, selectionArg);
        return loadDeepAllAndCloseCursor(cursor);
    }
 
}
