package net.maxsoft.precioustracker.model.dao;

import java.util.List;
import net.maxsoft.precioustracker.model.dao.DaoSession;
import de.greenrobot.dao.DaoException;

// THIS CODE IS GENERATED BY greenDAO, EDIT ONLY INSIDE THE "KEEP"-SECTIONS

// KEEP INCLUDES - put your custom includes here
import java.io.Serializable;
// KEEP INCLUDES END
/**
 * Entity mapped to table PRECIOUS_CATEGORY.
 */
public class PreciousCategory implements Serializable {

    private Long id;
    /** Not-null value. */
    private String name;

    /** Used to resolve relations */
    private transient DaoSession daoSession;

    /** Used for active entity operations. */
    private transient PreciousCategoryDao myDao;

    private List<PreciousItem> preciousItemList;

    // KEEP FIELDS - put your custom fields here
    private static final long serialVersionUID = 7646187902369333706L;

    public static final String INTENT_MESSAGE = "intent.PreciousCategory";
    // KEEP FIELDS END

    public PreciousCategory() {
    }

    public PreciousCategory(Long id) {
        this.id = id;
    }

    public PreciousCategory(Long id, String name) {
        this.id = id;
        this.name = name;
    }

    /** called by internal mechanisms, do not call yourself. */
    public void __setDaoSession(DaoSession daoSession) {
        this.daoSession = daoSession;
        myDao = daoSession != null ? daoSession.getPreciousCategoryDao() : null;
    }

    public Long getId() {
        return id;
    }

    public void setId(Long id) {
        this.id = id;
    }

    /** Not-null value. */
    public String getName() {
        return name;
    }

    /** Not-null value; ensure this value is available before it is saved to the database. */
    public void setName(String name) {
        this.name = name;
    }

    /** To-many relationship, resolved on first access (and after reset). Changes to to-many relations are not persisted, make changes to the target entity. */
    public List<PreciousItem> getPreciousItemList() {
        if (preciousItemList == null) {
            if (daoSession == null) {
                throw new DaoException("Entity is detached from DAO context");
            }
            PreciousItemDao targetDao = daoSession.getPreciousItemDao();
            List<PreciousItem> preciousItemListNew = targetDao._queryPreciousCategory_PreciousItemList(id);
            synchronized (this) {
                if(preciousItemList == null) {
                    preciousItemList = preciousItemListNew;
                }
            }
        }
        return preciousItemList;
    }

    /** Resets a to-many relationship, making the next get call to query for a fresh result. */
    public synchronized void resetPreciousItemList() {
        preciousItemList = null;
    }

    /** Convenient call for {@link AbstractDao#delete(Object)}. Entity must attached to an entity context. */
    public void delete() {
        if (myDao == null) {
            throw new DaoException("Entity is detached from DAO context");
        }    
        myDao.delete(this);
    }

    /** Convenient call for {@link AbstractDao#update(Object)}. Entity must attached to an entity context. */
    public void update() {
        if (myDao == null) {
            throw new DaoException("Entity is detached from DAO context");
        }    
        myDao.update(this);
    }

    /** Convenient call for {@link AbstractDao#refresh(Object)}. Entity must attached to an entity context. */
    public void refresh() {
        if (myDao == null) {
            throw new DaoException("Entity is detached from DAO context");
        }    
        myDao.refresh(this);
    }

    // KEEP METHODS - put your custom methods here
    public String toString() {
        return name;
    }
    // KEEP METHODS END

}
